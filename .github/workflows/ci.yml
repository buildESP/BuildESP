name: Fullstack Frontend/Backend CI/CD

on:
  push:
    branches:
      - DevOps_ESP-51
  pull_request:
    branches:
      - DevOps_ESP-51

env:
  NODE_VERSION: '20'
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_IMAGE_FRONTEND: stephb421/buildesp-frontend
  DOCKER_IMAGE_BACKEND: stephb421/buildesp-backend

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      node_modules_frontend: ${{ steps.cache-frontend.outputs.cache-hit }}
      node_modules_backend: ${{ steps.cache-backend.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Cache Node.js modules (frontend)
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-frontend\-</span>{{ hashFiles('frontend/app/package-lock.json') }}

      - name: Install dependencies (frontend)
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd frontend/app
          npm ci

      - name: Cache Node.js modules (backend)
        id: cache-backend
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-backend\-</span>{{ hashFiles('backend/api/package-lock.json') }}

      - name: Install dependencies (backend)
        if: steps.cache-backend.outputs.cache-hit != 'true'
        run: |
          cd backend/api
          npm install

  lint:
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.project }}/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-</span>{{ matrix.project }}-<span class="math-inline">\{\{ hashFiles\('</span>{{ matrix.project }}/app/package-lock.json') }}

      - name: Install ESLint
        run: npm install --save-dev eslint

      - name: Lint ${{ matrix.project }}
        run: |
          cd ${{ matrix.project }}/app
          npx eslint .
        continue-on-error: true

  format:
    needs: init
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: [frontend, backend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.project }}/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-</span>{{ matrix.project }}-<span class="math-inline">\{\{ hashFiles\('</span>{{ matrix.project }}/app/package-lock.json') }}

      - name: Install Prettier
        run: npm install --save-dev prettier

      - name: Format ${{ matrix.project }}
        run: |
          cd ${{ matrix.project }}/app
          npx prettier --write .
        continue-on-error: true

  codacy:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-frontend\-</span>{{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-backend\-</span>{{ hashFiles('backend/api/package-lock.json') }}

      - name: Run Codacy Analysis CLI
        uses: codacy/codacy-analysis-cli-action@master
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          upload: true
          max-allowed-issues: 100
          fail-if-incomplete: false
          verbose: true
        continue-on-error: true

  security:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-frontend\-</span>{{ hashFiles('frontend/app/package-lock.json') }}

      - name: Install dependencies (frontend)
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd frontend/app
          npm ci

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-backend\-</span>{{ hashFiles('backend/api/package-lock.json') }}

      - name: Install dependencies (backend)
        if: steps.cache-backend.outputs.cache-hit != 'true'
        run: |
          cd backend/api
          npm i

      - name: Run Snyk for dependency scanning
        uses: snyk/actions/node@master
        with:
          command: test
          args: --all-projects
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  build:
    needs: [lint, format, codacy, security]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-frontend\-</span>{{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: <span class="math-inline">\{\{ runner\.os \}\}\-backend\-</span>{{ hashFiles('backend/api/package-lock.json') }}

      - name: Build (frontend)
        run: |
          cd frontend/app
          npm run build

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Image (frontend)
        uses: docker/build-push-action@v5
        with:
          context: frontend/app
          push: true
          tags: ${{ env.DOCKER_IMAGE_FRONTEND }}:latest

      - name: Build and Push Docker Image (backend)
        uses: docker/build-push-action@v5
        with:
          context: backend/api
          push: true
          tags: ${{ env.DOCKER_IMAGE_BACKEND }}:latest

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   environment: ${{ github.event_name == 'push' && 'production' || 'qa' }}
  #   steps: