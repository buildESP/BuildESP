name: Fullstack-CI-Pipeline

on:
  push:
    branches:
      - DevOps_ESP-51
  pull_request:
    branches:
      - DevOps_ESP-51

env:
  NODE_VERSION: '20.x'
  CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: write
  actions: read
  packages: write
  security-events: write

jobs:
  init:
    runs-on: ubuntu-22.04
    outputs:
      node_modules_frontend: ${{ steps.cache-frontend.outputs.cache-hit }}
      node_modules_backend: ${{ steps.cache-backend.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Configure npm cache
        run: npm config set cache .npm --global

      - name: Cache Node.js modules (frontend)
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: |
            frontend/app/node_modules
            ~/.npm
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}
          restore-keys: ${{ runner.os }}-frontend-

      - name: Install frontend dependencies
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        working-directory: frontend/app
        run: npm ci --prefer-offline --no-audit

      - name: Cache Node.js modules (backend)
        id: cache-backend
        uses: actions/cache@v4
        with:
          path: |
            backend/api/node_modules
            ~/.npm
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}
          restore-keys: ${{ runner.os }}-backend-

      - name: Install backend dependencies
        if: steps.cache-backend.outputs.cache-hit != 'true'
        working-directory: backend/api
        run: npm ci --prefer-offline --no-audit

  quality:
    needs: init
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        project:
          - { path: 'frontend/app', name: 'frontend' }
          - { path: 'backend/api', name: 'backend' }
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore Node.js modules
        uses: actions/cache@v4
        with:
          path: ${{ matrix.project.path }}/node_modules
          key: ${{ runner.os }}-${{ matrix.project.name }}-${{ hashFiles('${{ matrix.project.path }}/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.project.name }}-

      - name: Install quality tools
        working-directory: ${{ matrix.project.path }}
        run: npm install --save-dev eslint prettier eslint-config-prettier eslint-plugin-prettier

      - name: Lint and Format Check
        working-directory: ${{ matrix.project.path }}
        run: |
          npx eslint . --max-warnings=0
          npx prettier --check .
        continue-on-error: true

      - name: Run Codacy Analysis
        uses: codacy/codacy-analysis-cli-action@v4
        with:
          project-token: ${{ env.CODACY_PROJECT_TOKEN }}
          directory: ${{ github.workspace }}/${{ matrix.project.path }}
        continue-on-error: true

  security:
    needs: init
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/app/node_modules
            backend/api/node_modules
          key: ${{ runner.os }}-*-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-*-
      - name: Run Snyk Monitor
        uses: snyk/actions/node@master
        with:
          command: monitor
          args: --all-projects --severity-threshold=high
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: security
          output: ../results
          upload: always
          cleanup-level: brutal
          skip-queries: false
          upload-database: true
          wait-for-processing: true
        continue-on-error: true

  test:
    needs: init
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Restore dependencies
        uses: actions/cache@v4
        with:
          path: |
            frontend/app/node_modules
            backend/api/node_modules
          key: ${{ runner.os }}-*-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-*-
      - name: Run Unit Tests
        run: |
          cd backend/api
          npm install --save-dev jest supertest @types/jest @types/supertest
          npm test -- --coverage
          cd ../../frontend/app
          npm install --save-dev jest
          npm test -- --coverage
        continue-on-error: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}