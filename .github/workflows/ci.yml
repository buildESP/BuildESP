name: Fullstack Frontend/Backend CI/CD

on:
  push:
    branches:
      - DevOps_ESP-51
  pull_request:
    branches:
      - DevOps_ESP-51

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      node_modules_frontend: ${{ steps.cache-frontend.outputs.cache-hit }}
      node_modules_backend: ${{ steps.cache-backend.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules (frontend)
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Install dependencies (frontend)
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd frontend/app
          npm ci

      - name: Cache Node.js modules (backend)
        id: cache-backend
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Install dependencies (backend)
        if: steps.cache-backend.outputs.cache-hit != 'true'
        run: |
          cd backend/api
          npm install

#   lint:
#     needs: init
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Restore Node.js modules (frontend)
#         uses: actions/cache@v4
#         with:
#           path: frontend/app/node_modules
#           key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

#       - name: Restore Node.js modules (backend)
#         uses: actions/cache@v4
#         with:
#           path: backend/api/node_modules
#           key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

#       - name: Install ESLint
#         run: npm install --save-dev eslint

#       - name: Lint (frontend)
#         run: |
#           cd frontend/app
#           npx eslint .
#         continue-on-error: true

#       - name: Lint (backend)
#         run: |
#           cd backend/api
#           npx eslint .
#         continue-on-error: true

#   format:
#     needs: init
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Restore Node.js modules (frontend)
#         uses: actions/cache@v4
#         with:
#           path: frontend/app/node_modules
#           key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

#       - name: Restore Node.js modules (backend)
#         uses: actions/cache@v4
#         with:
#           path: backend/api/node_modules
#           key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

#       - name: Install Prettier
#         run: npm install --save-dev prettier

#       - name: Format (frontend)
#         run: |
#           cd frontend/app
#           npx prettier --write .
#         continue-on-error: true

#       - name: Format (backend)
#         run: |
#           cd backend/api
#           npx prettier --write .
#         continue-on-error: true

#   codacy:
#     needs: init
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4

#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: '20'

#       - name: Restore Node.js modules (frontend)
#         uses: actions/cache@v4
#         with:
#           path: frontend/app/node_modules
#           key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

#       - name: Restore Node.js modules (backend)
#         uses: actions/cache@v4
#         with:
#           path: backend/api/node_modules
#           key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

#       - name: Run Codacy Analysis CLI
#         uses: codacy/codacy-analysis-cli-action@master
#         with:
#           project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
#           upload: true
#           max-allowed-issues: 100
#           fail-if-incomplete: false
#           verbose: true
#         continue-on-error: true

  build:
   # needs: [lint, format, codacy]
    runs-on: ubuntu-latest
    outputs:
      frontend_build_cache: ${{ steps.cache-frontend-build.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Build (frontend)
        run: |
          cd frontend/app
          npm run build

      - name: Cache frontend build output
        id: cache-frontend-build
        uses: actions/cache@v4
        with:
          path: frontend/app/dist
          key: ${{ runner.os }}-frontend-build-${{ hashFiles('frontend/app/dist/**/*') }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
            username: ${{ secrets.DOCKER_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build Docker Image (frontend)
        run: |
          cd frontend/app
          docker build -t stephb421/buildesp-frontend:latest .

      - name: Push Docker Image (frontend)
        run: |
          docker push stephb421/buildesp-frontend:latest

      - name: Build Docker Image (backend)
        run: |
          cd backend/api
          docker build -t stephb421/buildesp-backend:latest .

      - name: Push Docker Image (backend)
        run: |
          docker push stephb421/buildesp-backend:latest