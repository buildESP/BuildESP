name: Fullstack Frontend/Backend CI/CD

on:
  push:
    branches:
      - DevOps_ESP-51
  pull_request:
    branches:
      - DevOps_ESP-51

jobs:
  init:
    runs-on: ubuntu-latest
    outputs:
      node_modules_frontend: ${{ steps.cache-frontend.outputs.cache-hit }}
      node_modules_backend: ${{ steps.cache-backend.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Cache Node.js modules (frontend)
        id: cache-frontend
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Install dependencies (frontend)
        if: steps.cache-frontend.outputs.cache-hit != 'true'
        run: |
          cd frontend/app
          npm ci

      - name: Cache Node.js modules (backend)
        id: cache-backend
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Install dependencies (backend)
        if: steps.cache-backend.outputs.cache-hit != 'true'
        run: |
          cd backend/api
          npm install

  formatter:
    needs: init
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Install Biome
        run: npm install --save-dev @biomejs/biome

      - name: Format (frontend)
        run: |
          cd frontend/app
          npx biome format --write .
        continue-on-error: true

      - name: Format (backend)
        run: |
          cd backend/api
          npx biome format --write .
        continue-on-error: true

      - name: Lint (frontend)
        run: |
          cd frontend/app
          npx biome lint .
        continue-on-error: true

      - name: Lint (backend)
        run: |
          cd backend/api
          npx biome lint .
        continue-on-error: true

  build:
    needs: formatter
    runs-on: ubuntu-latest
    outputs:
      frontend_build_cache: ${{ steps.cache-frontend-build.outputs.cache-hit }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Build (frontend)
        run: |
          cd frontend/app
          npm run build

      - name: Cache frontend build output
        id: cache-frontend-build
        uses: actions/cache@v4
        with:
          path: frontend/app/dist
          key: ${{ runner.os }}-frontend-build-${{ hashFiles('frontend/app/dist/**/*') }}

      - name: Build Docker Image (frontend)
        run: |
          cd frontend/app
          docker build -t stephb421/buildesp-frontend:latest .

      - name: Push Docker Image (frontend)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push stephb421/buildesp-frontend:latest 

      - name: Build Docker Image (backend)
        run: |
          cd backend/api
          docker build -t stephb421/buildesp-backend:latest .
          # If you want to push the image to a registry, add a docker login and push step here

      - name: Push Docker Image (backend)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          docker push stephb421/buildesp-backend:latest

  test:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: Test (frontend)
        run: |
          cd frontend/app
          npm run test:coverage
        continue-on-error: true

      - name: Test (backend)
        run: |
          cd backend/api
          npm run test:coverage
        continue-on-error: true

  sonar:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Restore Node.js modules (frontend)
        uses: actions/cache@v4
        with:
          path: frontend/app/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/app/package-lock.json') }}

      - name: Restore Node.js modules (backend)
        uses: actions/cache@v4
        with:
          path: backend/api/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/api/package-lock.json') }}

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >-
            -Dsonar.organization=YOUR_SONAR_ORGANIZATION
            -Dsonar.projectKey=YOUR_SONAR_PROJECT_KEY
            -Dsonar.sources=frontend/src,backend/src
            -Dsonar.tests=frontend/src,backend/test
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info,backend/coverage/lcov.info
        continue-on-error: true