import { useState, useEffect } from "react"
import { ItemContext } from "./ItemContext"
import useFetchData from "../hooks/useFetchData"

/**
 * ðŸ“Œ Fournit le contexte des Items Ã  l'application.
 *
 * Ce Provider :
 * - RÃ©cupÃ¨re les **items** depuis l'API `/items`.
 * - Permet de **rafraÃ®chir** la liste via `refetch()`.
 * - GÃ¨re des **items locaux** via `addNewItem()` pour un affichage instantanÃ©.
 *
 * @param {React.ReactNode} children - Composants enfants.
 * @returns {JSX.Element}
 */
const ItemProvider = ({ children }) => {
  // ðŸ”¹ RÃ©cupÃ©ration des items depuis l'API
  const { data: items, loading, error, refetch } = useFetchData("/items")

  // ðŸ”¹ Items ajoutÃ©s dynamiquement (localement)
  const [userItems, setUserItems] = useState([])

  /**
   * ðŸ”„ Initialise les items locaux avec ceux de l'API (une seule fois)
   */
  useEffect(() => {
    const shouldInitialize =
      Array.isArray(items) && items.length > 0 && userItems.length === 0

    if (shouldInitialize) {
      setUserItems(items)
    }
  }, [items, userItems.length])

  /**
   * âœ… Ajoute un item localement (en haut de la liste)
   * @param {Object} newItem - Le nouvel item Ã  ajouter.
   */
  const addNewItem = (newItem) => {
    setUserItems((prev) => [newItem, ...prev])
  }

  // ðŸ§© Combine les items locaux et ceux de l'API (en Ã©vitant les doublons si nÃ©cessaire)
  const combinedItems = [...userItems, ...(items ?? []).filter(apiItem => !userItems.find(u => u.id === apiItem.id))]

  return (
    <ItemContext.Provider
      value={{
        items: combinedItems,
        loading,
        error,
        refetch,
        addNewItem,
      }}
    >
      {children}
    </ItemContext.Provider>
  )
}

export default ItemProvider
